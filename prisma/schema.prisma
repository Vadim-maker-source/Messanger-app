generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int           @id @default(autoincrement())
  name       String
  email      String        @unique
  password   String
  number     String?
  bio        String?
  avatar     String?
  createdAt  DateTime      @default(now())

  groups     GroupMember[]
  adminIn    GroupAdmin[]
  messages   Message[]
  ownedGroups Group[]     @relation("GroupOwner")
  contacts   Contact[] @relation("UserContacts")

  // üëá –ö–æ–Ω—Ç–∞–∫—Ç—ã, –≥–¥–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–∞–º –∫–æ–Ω—Ç–∞–∫—Ç
  contactOf  Contact[] @relation("ContactUsers")

  MessageRead MessageRead[]

  Caller Call[] @relation("CallerCalls")

  Call Call[] @relation("ReceiverCalls")
}

model Contact {
  id          Int    @id @default(autoincrement())
  userId      Int
  contactId   Int
  customName  String
  createdAt   DateTime @default(now())

  // üëá –í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—Ç–æ—Ç, –∫—Ç–æ –¥–æ–±–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç)
  user    User @relation("UserContacts", fields: [userId], references: [id])

  contact User @relation("ContactUsers", fields: [contactId], references: [id])

  @@unique([userId, contactId])
}

model Call {
  id          Int       @id @default(autoincrement())
  callerId    Int
  receiverId  Int
  callType    String    // 'audio' | 'video'
  status      String    // 'pending' | 'accepted' | 'rejected' | 'ended' | 'missed'
  startedAt   DateTime? @map("started_at")
  endedAt     DateTime? @map("ended_at")
  duration    Int?      // in seconds

  caller      User      @relation("CallerCalls", fields: [callerId], references: [id])
  receiver    User      @relation("ReceiverCalls", fields: [receiverId], references: [id])

  @@map("calls")
}

model Group {
  id            Int           @id @default(autoincrement())
  name          String
  username      String?       @unique
  avatarUrl     String?
  ownerId       Int
  owner         User          @relation("GroupOwner", fields: [ownerId], references: [id])
  createdAt     DateTime      @default(now())
  isChat        Boolean       @default(false)
  isPrivate     Boolean       @default(false)

  members       GroupMember[]
  admins        GroupAdmin[]
  messages      Message[]
}

model GroupMember {
  id        Int     @id @default(autoincrement())
  userId    Int
  groupId   Int
  user      User    @relation(fields: [userId], references: [id])
  group     Group   @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model GroupAdmin {
  id        Int     @id @default(autoincrement())
  userId    Int
  groupId   Int
  user      User    @relation(fields: [userId], references: [id])
  group     Group   @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model Message {
  id        Int       @id @default(autoincrement())
  content   String
  userId    Int
  groupId   Int
  user      User      @relation(fields: [userId], references: [id])
  group     Group     @relation(fields: [groupId], references: [id])
  createdAt DateTime  @default(now())

  MessageRead MessageRead[]
  attachments Attachment[] // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
}

model Attachment {
  id        Int      @id @default(autoincrement())
  messageId Int
  type      String   // 'image', 'video', 'document', 'voice'
  url       String
  pathname  String?
  filename  String?
  size      Int?
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
}

model MessageRead {
  id        Int      @id @default(autoincrement())
  userId    Int
  messageId Int
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId])
}